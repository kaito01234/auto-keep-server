name: Task Scheduler
on:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:

permissions:
  issues: write
  actions: write
  contents: read

jobs:
  check_and_execute:
    runs-on: ubuntu-latest
    steps:
      - name: Check scheduled tasks
        uses: actions/github-script@v7
        with:
          script: |
            console.log('🔍 Checking scheduled tasks...');
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'scheduled',
              state: 'open',
              sort: 'created',
              direction: 'asc'
            });
            
            console.log(`📋 Found ${issues.data.length} tasks`);
            
            const now = new Date();
            let executedCount = 0;
            
            for (const issue of issues.data) {
              console.log(`\n📌 Issue #${issue.number}: ${issue.title}`);
              
              const timeMatch = issue.body.match(/\*\*Scheduled time\*\*:\s*(.+)/);
              const workflowMatch = issue.body.match(/Workflow:\s*(.+)/);
              
              if (!timeMatch) {
                console.log('⚠️ Scheduled time not found');
                continue;
              }
              
              const scheduledTime = new Date(timeMatch[1]);
              const workflowFile = workflowMatch ? workflowMatch[1] : 'playwright.yml';
              
              console.log(`⏰ Scheduled time: ${scheduledTime.toISOString()}`);
              console.log(`📁 Workflow: ${workflowFile}`);
              
              if (now >= scheduledTime) {
                console.log('✅ Execution time reached!');
                
                try {
                  await github.rest.actions.createWorkflowDispatch({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    workflow_id: workflowFile,
                    ref: 'main'
                  });
                  
                  console.log('🚀 Workflow started');
                  
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    body: `✅ Task executed!\nExecution time: ${now.toISOString()}\n\n[View workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions)`
                  });
                  
                  await github.rest.issues.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    state: 'closed'
                  });
                  
                  executedCount++;
                  
                } catch (error) {
                  console.error(`❌ Execution error: ${error.message}`);
                  
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    body: `❌ Task execution failed\nError: ${error.message}\n\nPlease retry or execute manually.`
                  });
                }
                
              } else {
                const minutesUntil = Math.ceil((scheduledTime - now) / (60 * 1000));
                console.log(`⏳ Scheduled to run in ${minutesUntil} minutes`);
              }
            }
            
            console.log(`\n📊 Summary: Executed ${executedCount} tasks`);
            
            if (executedCount > 0) {
              core.notice(`Executed ${executedCount} scheduled tasks`);
            }